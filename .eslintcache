[{"/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/index.js":"1","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/reportWebVitals.js":"2","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/App.js":"3","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/Views/Experiments.jsx":"4","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/Views/Admin.jsx":"5","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/Views/Receiver.jsx":"6","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/Views/Transporter.jsx":"7","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/custom-hooks/usePosition.js":"8","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/Components/Marker.jsx":"9","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/utils.js":"10","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/custom-hooks/useInterval.js":"11"},{"size":529,"mtime":1625143324397,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1625143324397,"results":"14","hashOfConfig":"13"},{"size":625,"mtime":1625155809302,"results":"15","hashOfConfig":"13"},{"size":2905,"mtime":1625143324396,"results":"16","hashOfConfig":"13"},{"size":2750,"mtime":1625143324396,"results":"17","hashOfConfig":"13"},{"size":4159,"mtime":1625513444245,"results":"18","hashOfConfig":"13"},{"size":5460,"mtime":1625177826419,"results":"19","hashOfConfig":"13"},{"size":1418,"mtime":1625143324397,"results":"20","hashOfConfig":"13"},{"size":1036,"mtime":1625143324396,"results":"21","hashOfConfig":"13"},{"size":129,"mtime":1625170780790,"results":"22","hashOfConfig":"13"},{"size":578,"mtime":1625171649353,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1f03ncj",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/index.js",[],["53","54"],"/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/reportWebVitals.js",[],"/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/App.js",[],"/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/Views/Experiments.jsx",["55","56"],"import React, { useState } from 'react';\nimport GoogleMap from 'google-map-react';\nimport { BiCurrentLocation } from \"react-icons/bi\";\n\nconst Experiments = (props) => {\n\n    function renderPolylines(map, maps) {\n        /** Example of rendering geodesic polyline */\n        let geodesicPolyline = new maps.Polyline({\n            path: props.markers,\n            geodesic: true,\n            strokeColor: '#00a1e1',\n            strokeOpacity: 1.0,\n            strokeWeight: 4\n        })\n\n        geodesicPolyline.setMap(map)\n\n        /** Example of rendering non geodesic polyline (straight line) */\n        let nonGeodesicPolyline = new maps.Polyline({\n            path: props.markers,\n            geodesic: false,\n            strokeColor: '#e4e4e4',\n            strokeOpacity: 0.7,\n            strokeWeight: 3\n        })\n        nonGeodesicPolyline.setMap(map)\n\n        fitBounds(map, maps)\n    }\n\n    function fitBounds(map, maps) {\n        var bounds = new maps.LatLngBounds()\n        for (let marker of props.markers) {\n            bounds.extend(\n                new maps.LatLng(marker.lat, marker.lng)\n            )\n        }\n        map.fitBounds(bounds)\n    }\n\n\n    const [marker, setMarker] = useState({\n        lat: 23.955413,\n        lng: 90.337844\n    });\n\n    const center = {\n        lat: 23.955413,\n        lng: 90.337844\n    }\n\n    const [draggable, setDraggable] = useState(true);\n\n    const onChangeHandler = ({ center, zoom }) => {\n        console.log(center, zoom);\n    }\n\n    const onMarkerInteraction = (childKey, childProps, mouse) => {\n        setDraggable(false);\n        setMarker({\n            lat: mouse.lat,\n            lng: mouse.lng\n        })\n    }\n\n    const onMarkerInteractionClose = () => {\n        setDraggable(true);\n    }\n    return (\n        <div style={{ height: '100vh' }}>\n\n            <GoogleMap\n                bootstrapURLKeys={{ key: 'AIzaSyCvv_c6oudIDXsjU5bVR7Y3uL_2mK1NcfU' }}\n                defaultZoom={14}\n                center={center}\n                yesIWantToUseGoogleMapApiInternals\n                draggable={draggable}\n                onChildMouseDown={onMarkerInteraction}\n                onChildMouseUp={onMarkerInteractionClose}\n                onChildMouseMove={onMarkerInteraction}\n            // onGoogleApiLoaded={({ map, maps }) => renderPolylines(map, maps)}\n            >\n                <Pin\n                    lat={marker.lat}\n                    lng={marker.lng}\n                />\n            </GoogleMap>\n\n        </div>\n    );\n};\n\nexport default Experiments;\n\n\nconst Pin = () => {\n    return (\n        <div>\n            <BiCurrentLocation size={32} />\n        </div>\n    )\n}\n\n\nExperiments.defaultProps = {\n    markers: [\n        {\n            lat: 23.955413,\n            lng: 90.337844\n        },\n        {\n            lat: 23.955423,\n            lng: 90.337854\n        }\n    ],\n    center: [47.367347, 8.5500025],\n    zoom: 16\n}",["57","58"],"/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/Views/Admin.jsx",["59","60"],"import React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport GoogleMap from 'google-map-react';\nimport {\n    Badge\n} from 'antd';\nimport Marker from '../Components/Marker';\nimport io from 'socket.io-client';\nconst socketV2 = io(`${process.env.REACT_APP_SERVER}/admin`, {\n    query: {\n        foo: 'bar'\n    }\n});\n\n\n\nconst Admin = () => {\n\n    const [transporters, setTransporters] = useState([]);\n    const [center, setCenter] = useState({\n        lat: 23.774748799999998, lng: 90.36212019999999\n    });\n\n    useEffect(() => {\n        socketV2.on('otherPositions', (data) => {\n\n            console.log(data[0].timestamp);\n\n            setTransporters(data);\n        });\n\n        return (() => {\n            socketV2.on('disconnect', 'the boss');\n        });\n    }, []);\n\n\n\n    //defining focusOnUser function\n    const focusOnUser = (lat, lng) => {\n        setCenter({\n            lat: lat,\n            lng: lng\n        })\n    }\n\n    return (\n        <>\n\n            <div style={{ height: '30vh', padding: '2rem 4rem', display: 'flex', flexDirection: 'column', backgroundColor: '#171717' }}>\n\n\n                <span style={{ color: '#1890FF', fontSize: '16px', fontWeight: 700 }}>Currect Active User: {transporters.length}</span>\n                {\n                    transporters.map(transporter => {\n                        return <a key={transporter.timestamp} onClick={() => focusOnUser(transporter.lat, transporter.lng)} style={{ textTransform: 'capitalize' }}>{transporter.username}</a>\n                    })\n                }\n\n                <br />\n            </div>\n            <div style={{ height: '700px', width: '100%' }}>\n                <GoogleMap\n                    bootstrapURLKeys={{ key: 'AIzaSyCvv_c6oudIDXsjU5bVR7Y3uL_2mK1NcfU' }}\n                    //defaultCenter={center}\n                    defaultZoom={16}\n                    center={center}\n                >\n                    {\n                        transporters.map(transporter => {\n                            return <Marker\n                                key={Math.random()}\n                                lat={transporter.lat}\n                                lng={transporter.lng}\n                                username={transporter.username}\n                                timestamp={transporter.timestamp}\n                                accuracy={transporter.accuracy}\n                                speed={transporter.speed}\n                            />\n                        })\n                    }\n\n                </GoogleMap>\n            </div>\n        </>\n    );\n};\n\nexport default Admin;\n\nconst AnyReactComponent = ({ text }) => <div className=\"dot\" style={{ color: 'red' }}>  <Badge status=\"error\" /> {text} </div>;","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/Views/Receiver.jsx",["61","62","63","64","65","66","67"],"/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/Views/Transporter.jsx",["68","69","70","71","72","73","74","75"],"import React, { useState, useEffect } from 'react';\nimport {\n    Badge,\n    Statistic\n} from 'antd';\nimport { LikeOutlined } from '@ant-design/icons';\nimport { usePosition } from '../custom-hooks/usePosition';\nimport GoogleMap from 'google-map-react';\nimport PropTypes from 'prop-types';\nimport Marker from '../Components/Marker';\nimport { socket } from \"../utils\";\nimport useInterval from '../custom-hooks/useInterval';\n//const socket = io('https://godview-server.herokuapp.com');\n\n\n// const socketV2 = io(`${process.env.REACT_APP_SERVER}/admin`, {\n//     forceNew: true,\n//     query: {\n//         foo: 'bar'\n//     }\n// });\n\n\nconst Transporter = ({ watch, settings, location }) => {\n\n\n    const [zoom, setZoom] = useState(16);\n\n    const [marker, setMarker] = useState({\n        lat: 23.955413,\n        lng: 90.337844,\n    })\n\n    const {\n        latitude,\n        longitude,\n        timestamp,\n        accuracy,\n        speed,\n        error,\n    } = usePosition(true, settings);\n\n    const [isRequesting, setIsRequesting] = useState(false);\n    const [delay, setDelay] = useState(5000);\n\n\n    useEffect(() => {\n\n        return () => {\n            let payload = {\n                foo: 'bar'\n            }\n            socket.on('disconnect', payload); //TODO:coming back to this later\n        }\n    }, []);\n\n\n\n\n    // useEffect(() => {\n\n    //     console.log(`Location was updated!`);\n    //     setMarker({\n    //         lat: latitude,\n    //         lng: longitude\n    //     })\n\n    //     let roomId = location.search.substring(1);\n\n\n    //     let data = {\n    //         lat: latitude,\n    //         lng: longitude\n    //     }\n    //     let data2 = {\n    //         lat: latitude,\n    //         lng: longitude,\n    //         username: roomId,\n    //         timestamp: timestamp,\n    //         speed: speed,\n    //         accuracy: accuracy\n    //     }\n\n    //     console.log('Checking timestamp', accuracy);\n\n    //     socket.emit('position', roomId, data);\n    //     // socketV2.emit('position', data2);\n\n\n    // }, [timestamp, latitude, longitude]);\n\n    //defining sendRequestForDelivery function\n    const sendRequestForDelivery = () => {\n\n        let payload = {\n            userID: location.search.substring(1),\n            location: {\n                type: 'Point',\n                address: 'Some Address',\n                lat: latitude,\n                lng: longitude\n            }\n        }\n        socket.emit('request-for-delivery', payload);\n\n        // setIsRequesting(true);\n    }\n\n\n    useInterval(\n        () => {\n            // Your custom logic here\n            console.log('Emitting location...');\n            let payload = {\n                userID: location.search.substring(1),\n                location: {\n                    type: 'Point',\n                    address: 'Some Address',\n                    coordinates: [\n                        latitude,\n                        longitude\n                    ]\n                }\n            }\n            socket.emit('request-for-delivery', payload);\n        },\n        // Delay in milliseconds or null to stop it\n        isRequesting ? delay : null,\n    )\n\n\n\n    return (\n        <>\n            {/* <h1 onClick={shamimBhai}>The new transporter page {marker.lat} , {marker.lng} </h1> */}\n            <div style={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>\n\n                <div style={{ height: '30vh', padding: '2rem 4rem', display: 'flex', flexDirection: 'column', backgroundColor: '#171717' }}>\n\n                    <button onClick={sendRequestForDelivery} style={{ width: '250px' }}>Send Delivery Request</button>\n                    {/* <Badge style={{ color: 'white' }} status=\"processing\" text={`Latitude: ${latitude}`} />\n                    <Badge style={{ color: 'white' }} status=\"processing\" text={`Longitude: ${longitude}`} />\n                    <Badge style={{ color: 'white' }} status=\"processing\" text={`Timestamp: ${timestamp}`} />\n                    <Badge style={{ color: 'white' }} status=\"processing\" text={`Accuracy: ${accuracy && `${accuracy}m`}`} />\n                    <Badge style={{ color: 'white' }} status=\"processing\" text={`Speed: ${speed}`} />\n                    <br /> */}\n\n                    <span style={{ color: '#1890FF', fontSize: '16px', fontWeight: 700 }}>This is a beta of Godview, which is an under-construction geolocation tracking app engineered by Shamim Ferdous!</span>\n\n                    <br />\n                </div>\n\n                <div style={{ height: '700px', width: '100%' }}>\n                    <GoogleMap\n                        bootstrapURLKeys={{ key: 'AIzaSyCvv_c6oudIDXsjU5bVR7Y3uL_2mK1NcfU' }}\n                        //defaultCenter={center}\n                        defaultZoom={zoom}\n                        center={marker}\n                        yesIWantToUseGoogleMapApiInternals\n                    >\n                        <Marker\n                            lat={latitude}\n                            lng={longitude}\n                            username={location.search.substring(1)}\n                            timestamp={timestamp}\n                            accuracy={accuracy}\n                            speed={speed}\n                        />\n                    </GoogleMap>\n                </div>\n\n\n            </div>\n        </>\n    );\n}\n\nexport default Transporter;\n\n\nTransporter.propTypes = {\n    watch: PropTypes.bool,\n    settings: PropTypes.object,\n}\n\n\n","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/custom-hooks/usePosition.js",["76"],"import { useState, useEffect } from 'react';\n\nconst defaultSettings = {\n    enableHighAccuracy: true,\n    timeout: Infinity,\n    maximumAge: 0,\n};\n\nexport const usePosition = (watch = false, settings = defaultSettings) => {\n    const [position, setPosition] = useState({});\n    const [error, setError] = useState(null);\n\n    const onChange = ({ coords, timestamp }) => {\n        setPosition({\n            latitude: coords.latitude,\n            longitude: coords.longitude,\n            accuracy: coords.accuracy,\n            speed: coords.speed,\n            timestamp,\n        });\n    };\n\n    const onError = (error) => {\n        setError(error.message);\n    };\n\n    useEffect(() => {\n\n        console.log('Accuracy = ', settings.enableHighAccuracy)\n\n        if (!navigator || !navigator.geolocation) {\n            setError('Geolocation is not supported');\n            return;\n        }\n\n        let watcher = null;\n        if (watch) {\n            console.log('watching position')\n            watcher =\n                navigator.geolocation.watchPosition(onChange, onError, settings);\n        } else {\n            navigator.geolocation.getCurrentPosition(onChange, onError, settings);\n        }\n\n        return () => watcher && navigator.geolocation.clearWatch(watcher);\n    }, [\n        settings.enableHighAccuracy,\n        settings.timeout,\n        settings.maximumAge,\n    ]);\n\n    return { ...position, error };\n};","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/Components/Marker.jsx",["77"],"import React from 'react';\nimport moment from 'moment';\n\nfunction Marker({ username, lat, lng, timestamp, accuracy, speed }) {\n    return (\n        <div className=\"dot\" style={{ color: 'red' }}>\n\n            <svg viewBox=\"0 0 24 24\" width={24} height={24} stroke=\"currentColor\" strokeWidth={2} fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"css-i6dzq1\"><path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\" /><circle cx={12} cy={10} r={3} /></svg>\n            <div className=\"marker-div\">\n                <span className=\"marker-span\">{`Name: ${username}`}</span>\n                <span className=\"marker-span\">{`Latitude: ${lat}`}</span>\n                <span className=\"marker-span\">{`Longitude: ${lng}`}</span>\n                <span className=\"marker-span\">{`Timestamp: ${timestamp}`}</span>\n                <span className=\"marker-span\">{`Accuracy: ${accuracy}`}</span>\n                <span className=\"marker-span\">{`Speed: ${speed}`}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Marker;","/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/utils.js",[],"/Users/shamimferdous/Desktop/batdesk/transporter/socket-tester-client/src/custom-hooks/useInterval.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":7,"column":14,"nodeType":"84","messageId":"85","endLine":7,"endColumn":29},{"ruleId":"82","severity":1,"message":"86","line":55,"column":11,"nodeType":"84","messageId":"85","endLine":55,"endColumn":26},{"ruleId":"78","replacedBy":"87"},{"ruleId":"80","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":56,"column":32,"nodeType":"91","endLine":56,"endColumn":165},{"ruleId":"82","severity":1,"message":"92","line":91,"column":7,"nodeType":"84","messageId":"85","endLine":91,"endColumn":24},{"ruleId":"82","severity":1,"message":"93","line":18,"column":9,"nodeType":"84","messageId":"85","endLine":18,"endColumn":18},{"ruleId":"82","severity":1,"message":"94","line":19,"column":9,"nodeType":"84","messageId":"85","endLine":19,"endColumn":17},{"ruleId":"82","severity":1,"message":"95","line":20,"column":9,"nodeType":"84","messageId":"85","endLine":20,"endColumn":14},{"ruleId":"82","severity":1,"message":"96","line":21,"column":9,"nodeType":"84","messageId":"85","endLine":21,"endColumn":14},{"ruleId":"82","severity":1,"message":"97","line":26,"column":25,"nodeType":"84","messageId":"85","endLine":26,"endColumn":39},{"ruleId":"82","severity":1,"message":"98","line":32,"column":24,"nodeType":"84","messageId":"85","endLine":32,"endColumn":35},{"ruleId":"82","severity":1,"message":"99","line":33,"column":19,"nodeType":"84","messageId":"85","endLine":33,"endColumn":27},{"ruleId":"82","severity":1,"message":"100","line":3,"column":5,"nodeType":"84","messageId":"85","endLine":3,"endColumn":10},{"ruleId":"82","severity":1,"message":"101","line":4,"column":5,"nodeType":"84","messageId":"85","endLine":4,"endColumn":14},{"ruleId":"82","severity":1,"message":"102","line":6,"column":10,"nodeType":"84","messageId":"85","endLine":6,"endColumn":22},{"ruleId":"82","severity":1,"message":"103","line":27,"column":18,"nodeType":"84","messageId":"85","endLine":27,"endColumn":25},{"ruleId":"82","severity":1,"message":"104","line":29,"column":20,"nodeType":"84","messageId":"85","endLine":29,"endColumn":29},{"ruleId":"82","severity":1,"message":"96","line":40,"column":9,"nodeType":"84","messageId":"85","endLine":40,"endColumn":14},{"ruleId":"82","severity":1,"message":"105","line":43,"column":26,"nodeType":"84","messageId":"85","endLine":43,"endColumn":41},{"ruleId":"82","severity":1,"message":"99","line":44,"column":19,"nodeType":"84","messageId":"85","endLine":44,"endColumn":27},{"ruleId":"106","severity":1,"message":"107","line":46,"column":8,"nodeType":"108","endLine":50,"endColumn":6,"suggestions":"109"},{"ruleId":"82","severity":1,"message":"110","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":14},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'renderPolylines' is defined but never used.","Identifier","unusedVar","'onChangeHandler' is assigned a value but never used.",["111"],["112"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'AnyReactComponent' is assigned a value but never used.","'timestamp' is assigned a value but never used.","'accuracy' is assigned a value but never used.","'speed' is assigned a value but never used.","'error' is assigned a value but never used.","'setTransporter' is assigned a value but never used.","'setIsActive' is assigned a value but never used.","'setDelay' is assigned a value but never used.","'Badge' is defined but never used.","'Statistic' is defined but never used.","'LikeOutlined' is defined but never used.","'setZoom' is assigned a value but never used.","'setMarker' is assigned a value but never used.","'setIsRequesting' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'settings' and 'watch'. Either include them or remove the dependency array.","ArrayExpression",["113"],"'moment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},"Update the dependencies array to be: [settings.enableHighAccuracy, settings.timeout, settings.maximumAge, settings, watch]",{"range":"116","text":"117"},[1278,1377],"[settings.enableHighAccuracy, settings.timeout, settings.maximumAge, settings, watch]"]